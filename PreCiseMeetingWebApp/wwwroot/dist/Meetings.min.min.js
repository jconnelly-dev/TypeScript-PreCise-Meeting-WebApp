import{DateHelper}from"./DateHelper.js";import{Logger}from"./Logger.js";import{PreCiseException}from"./PreCiseException.js";import{Randomizer}from"./Randomizer.js";export class Meetings{static getWeeklyMeetingsInYear(e,t){Logger.log(Logger.LogLevel.INFO,Meetings,Meetings.getWeeklyMeetingsInYear);const g=new Array;if(!t)return g;const n=DateHelper.getDayOfWeek(e),r=new Date(e.getFullYear(),0,1);for(;DateHelper.getDayOfWeek(r)!=n;)r.setDate(r.getDate()+1);Logger.log(Logger.LogLevel.DEBUG,Meetings,Meetings.getWeeklyMeetingsInYear,`firstMeetingOfYear = ${r}`);const o=e.getFullYear(),i=e.getDate(),s=DateHelper.getNumDaysInYear(e),l=s-DateHelper.getDayOfYear(r);Logger.log(Logger.LogLevel.DEBUG,Meetings,Meetings.getWeeklyMeetingsInYear,`totalDaysInYear = ${s}`),Logger.log(Logger.LogLevel.DEBUG,Meetings,Meetings.getWeeklyMeetingsInYear,`daysRemainingForMeetings = ${l}`);for(let e=1;e<=l;e++){const t=new Date(o,0,i+e),r=DateHelper.getDayOfWeek(t);r==n&&g.push({id:g.length+1,date:t,dayOfWeek:r,attendees:[]})}const a=g.length,L=a%t.length==0?a/t.length:a/t.length+1;Logger.log(Logger.LogLevel.DEBUG,Meetings,Meetings.getWeeklyMeetingsInYear,`totalMeetingsInYear = ${a}`),Logger.log(Logger.LogLevel.DEBUG,Meetings,Meetings.getWeeklyMeetingsInYear,`numFirstPersonMeetingsInYear = ${L}`);let M=0;do{Logger.log(Logger.LogLevel.DEBUG,Meetings,Meetings.getWeeklyMeetingsInYear,`start do/while -> currMeetingIdx = ${M}`);const e=Randomizer.getUniqueFirstPersonGroups(r,t);if(e)for(let t=0;t<e.length&&M<g.length;t++)g[M].attendees=e[t],M++;Logger.log(Logger.LogLevel.DEBUG,Meetings,Meetings.getWeeklyMeetingsInYear,`end do/while -> currMeetingIdx = ${M}`)}while(M<g.length);return g}static getMeetingForWeek(e,t){Logger.log(Logger.LogLevel.INFO,Meetings,Meetings.getMeetingForWeek);let g=new Array;try{if(!t)throw new PreCiseException("names given for weekly meeting is null or empty.");const n=DateHelper.getDayOfWeek(e),r=DateHelper.getDayOfWeekOfYear(e,n);if(Logger.log(Logger.LogLevel.DEBUG,Meetings,Meetings.getWeeklyMeetingsInYear,`meetingDayOfWeek = ${n}`),Logger.log(Logger.LogLevel.DEBUG,Meetings,Meetings.getWeeklyMeetingsInYear,`weekNumberInYear = ${r}`),r<=0)throw new PreCiseException("invalid date given for meeting, unable to determine week number in year.");const o=this.getWeeklyMeetingsInYear(e,t);if(Logger.log(Logger.LogLevel.DEBUG,Meetings,Meetings.getWeeklyMeetingsInYear,`meetings.length = ${o.length}`),!o)throw new PreCiseException("unable to generate weekly meetings.");const i=o.find((e=>e.id===r));if(!i)throw new PreCiseException("unable to find the weekly meeting for the given date from the list of generated meetings.");if(!i.attendees)throw new PreCiseException("generated weekly meeting failed to populate the list of attendees.");g=i.attendees}catch(e){g=new Array,e instanceof Error?Logger.error(Logger.LogLevel.WARN,Meetings,Meetings.getMeetingForWeek,e):console.error("Caught Unknown Error",e)}return g}}